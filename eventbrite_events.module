<?php
/**
* @file
* Eventbrite Events Manager Module file.
*
*/

/**
 * Implements hook_config_info().
 */
function eventbrite_events_config_info() {
  $prefixes['eventbrite_events.settings'] = array(
    'label' => t('eventbrite_events settings'),
    'group' => t('eventbrite_events'),
  );
  return $prefixes;
}

/**
 * Implements hook_libraries_info().
 */
function eventbrite_events_libraries_info()
{
    $libraries['eventbrite'] = array(
        'name' => 'Eventbrite API PHP Library',
        'vendor url' => 'https://github.com/ryanj/eventbrite.php',
        'download url' => 'https://github.com/ryanj/eventbrite.php',
        'version callback' => 'short_circuit_version',
        'files' => array(
            'php' => array(
                'Eventbrite.php'
            )
        )
    );
    return $libraries;
}

/**
* Short-circuit the version argument.
*/
function short_circuit_version() {
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function eventbrite_events_permission()
{
    return array(
        'Use Eventbrite Events' => array(
            'title' => t('Use Eventbrite Events'),
            'description' => t('Give this permission to trusted admins to sync events and attach ticket widgets.')
        ),
        'Edit and Clone Eventbrite Events' => array(
            'title' => t('Edit and Clone Eventbrite Events'),
            'description' => t('Give this permission to trusted admins to edit and clone events.')
        ),
        'Access Eventbrite Keys' => array(
            'title' => t('Access Eventbrite Keys'),
            'description' => t('Give this permission to trusted admins to enter and view API keys')
        )
    );
}

/**
 * Implements hook_init().
 */
function eventbrite_events_init() {
  $library = libraries_load('eventbrite');

    if (($library = libraries_load('eventbrite')) && !empty($library['loaded'])) {
        return TRUE;
    } else {
        backdrop_set_message("You have enabled the Eventbrite Events module without adding the Eventbrite processing library.  Please follow the steps in the Readme file of this module to complete installation.", "error");
    }

}

function eventbrite_events_form_alter($form, &$form_state, $form_id) {
if ($form_id == 'eventbrite_event_node_form') {
if (user_access("Use Eventbrite Events")) {
}
else
{
backdrop_set_message("You do not have access to this section.", "warning");
backdrop_goto("/");
}
}
}

function eventbrite_events_form_eventbrite_event_node_form_alter(&$form, &$form_state, $form_id) {

  backdrop_add_css(backdrop_get_path('module', 'eventbrite_events') . "/css/eventbrite_events.css");

  if ($form['nid']['#value'] != NULL)
  {
  backdrop_set_message("To preserve event integrity between Eventbrite and this website, only the following fields will be modified on save here: title, body, and capacity.  To change the other options, please use Eventbrite.com.  This module is mainly for displaying your event information in different ways.", "warning");

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save and post'),
    '#access' => TRUE,
    '#submit' => array('eventbrite_event_node_form_submit'),
    '#weight' => 0,
  );

  if (user_access("Edit and Clone Eventbrite Events")) {
  $form['actions']['submit2'] = array(
    '#type' => 'submit',
    '#value' => t('Clone to Following Day'),
    '#access' => TRUE,
    '#submit' => array('eventbrite_events_save_new_day'),
    '#weight' => 1,
  );

  $form['actions']['submit3'] = array(
    '#type' => 'submit',
    '#value' => t('Clone to Following Week'),
    '#access' => TRUE,
    '#submit' => array('eventbrite_events_save_new_week'),
    '#weight' => 2,
  );
  }
}
  else
  {
  backdrop_set_message("Events created on this page will NOT be posted or synced to Eventbrite.  Add at YOUR OWN RISK because they are only for your eyes.  A good process instead is to post on Eventbrite or Edit and Clone an event from this website.", "warning");
  }

}

function eventbrite_events_save_new_day($form, &$form_state) {
$nid = $form_state['values']['nid'];
$node = node_load($nid);
$urlencoded = urlencode($node->body[$node->langcode][0]['value']);
$data = "";

$field_eb_online_event = $node->field_eb_online_event[$node->langcode][0]['value'];
if (empty($field_eb_online_event) || $field_eb_online_event == '')
{
$field_eb_online_event = "0";
}

$field_eb_listed = $node->field_eb_listed[$node->langcode][0]['value'];
if (empty($field_eb_listed) || $field_eb_listed == '')
{
$field_eb_listed = "0";
}

$field_eb_shareable = $node->field_eb_shareable[$node->langcode][0]['value'];
if (empty($field_eb_shareable) || $field_eb_shareable == '')
{
$field_eb_shareable = "0";
}

$field_eb_invite_only = $node->field_eb_invite_only[$node->langcode][0]['value'];
if (empty($field_eb_invite_only) || $field_eb_invite_only == '')
{
$field_eb_invite_only = "0";
}

$field_eb_capacity = $node->field_eb_capacity[$node->langcode][0]['value'];
if (empty($field_eb_capacity) || $field_eb_capacity == '')
{
$field_eb_capacity = "0";
}

$field_eb_show_remaining = $node->field_eb_show_remaining[$node->langcode][0]['value'];
if (empty($field_eb_show_remaining) || $field_eb_show_remaining == '')
{
$field_eb_show_remaining = "0";
}

$start = $node->field_eb_start_date[$node->langcode][0]['value'];
$date = new DateTime($start);
$date->modify('+1 day');
$start = $date->format("Y-m-d H:i:s");
$startarr = explode(" ",$start);
$start_evt = $startarr[0] . "T" . $startarr[1] . "Z";

$end = $node->field_eb_end_date[$node->langcode][0]['value'];
$date = new DateTime($end);
$date->modify('+1 day');
$end = $date->format("Y-m-d H:i:s");
$endarr = explode(" ",$end);
$end_evt = $endarr[0] . "T" . $endarr[1] . "Z";

$data .= 'event.name.html=' . $form_state['values']['title'] . '&';
$data .= 'event.description.html=' . $urlencoded . '&';
$data .= 'event.organizer_id=' . $node->field_eb_organizer_id[$node->langcode][0]['value'] . '&';
$data .= 'event.start.utc=' . $start_evt . '&';
$data .= 'event.start.timezone=' . $node->field_eb_timezone[$node->langcode][0]['value'] . '&';
$data .= 'event.end.utc=' . $end_evt . '&';
$data .= 'event.end.timezone=' . $node->field_eb_timezone[$node->langcode][0]['value'] . '&';
$data .= 'event.currency=' . $node->field_eb_currency[$node->langcode][0]['value'] . '&';
$data .= 'event.venue_id=' . $node->field_eb_venue_id[$node->langcode][0]['value'] . '&';
$data .= 'event.online_event=' . $field_eb_online_event . '&';
$data .= 'event.listed=' . $field_eb_listed . '&';
$data .= 'event.logo_id=' . $node->field_eb_logo_id[$node->langcode][0]['value'] . '&';
$data .= 'event.category_id=' . $node->field_eb_category[$node->langcode][0]['value'] . '&';
$data .= 'event.format_id=' . $node->field_eb_format_id[$node->langcode][0]['value'] . '&';
$data .= 'event.shareable=' . $field_eb_shareable . '&';
$data .= 'event.invite_only=' . $field_eb_invite_only . '&';
$data .= 'event.capacity=' . $field_eb_capacity . '&';
$data .= 'event.show_remaining=' . $field_eb_show_remaining;

$options = array(
                     'method' => 'POST',
                     'data' => $data,
                     'timeout' => 15,
                     'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
             );

$app_token = config_get('eventbrite_events.settings', 'eventbrite_events_token');
if ( isset($app_token) && ($app_token != "") && isset($data) && ($data != "") ) {
$result = backdrop_http_request('https://www.eventbriteapi.com/v3/events/?token=' . $app_token, $options);

if ($result->code == "200")
{
$theevent = $result->data;
$theevent = json_decode($theevent);
unset($node->nid);
unset($node->vid);
unset($node->path);
$node->title = $form_state['values']['title'];
$node->field_eb_id[$node->langcode][0]['value'] = $theevent->id;
$node->field_eb_start_date[$node->langcode][0]['value'] = $start;
$node->field_eb_end_date[$node->langcode][0]['value'] = $end;
$node->field_eb_full_date[$node->langcode][0]['value'] =  $start;
$node->field_eb_full_date[$node->langcode][0]['value2'] =  $end;

$node->save();
}
else
{
backdrop_set_message("Event not saved.  Error processing the Eventbrite Event Url: " . $result->error . " " . $result->status_message, "warning");
}
}
}


function eventbrite_events_save_new_week($form, &$form_state) {
$nid = $form_state['values']['nid'];
$node = node_load($nid);
$urlencoded = urlencode($node->body[$node->langcode][0]['value']);
$data = "";

$field_eb_online_event = $node->field_eb_online_event[$node->langcode][0]['value'];
if (empty($field_eb_online_event) || $field_eb_online_event == '')
{
$field_eb_online_event = "0";
}

$field_eb_listed = $node->field_eb_listed[$node->langcode][0]['value'];
if (empty($field_eb_listed) || $field_eb_listed == '')
{
$field_eb_listed = "0";
}

$field_eb_shareable = $node->field_eb_shareable[$node->langcode][0]['value'];
if (empty($field_eb_shareable) || $field_eb_shareable == '')
{
$field_eb_shareable = "0";
}

$field_eb_invite_only = $node->field_eb_invite_only[$node->langcode][0]['value'];
if (empty($field_eb_invite_only) || $field_eb_invite_only == '')
{
$field_eb_invite_only = "0";
}

$field_eb_capacity = $node->field_eb_capacity[$node->langcode][0]['value'];
if (empty($field_eb_capacity) || $field_eb_capacity == '')
{
$field_eb_capacity = "0";
}

$field_eb_show_remaining = $node->field_eb_show_remaining[$node->langcode][0]['value'];
if (empty($field_eb_show_remaining) || $field_eb_show_remaining == '')
{
$field_eb_show_remaining = "0";
}

$start = $node->field_eb_start_date[$node->langcode][0]['value'];
$date = new DateTime($start);
$date->modify('+7 days');
$start = $date->format("Y-m-d H:i:s");
$startarr = explode(" ",$start);
$start_evt = $startarr[0] . "T" . $startarr[1] . "Z";

$end = $node->field_eb_end_date[$node->langcode][0]['value'];
$date = new DateTime($end);
$date->modify('+7 days');
$end = $date->format("Y-m-d H:i:s");
$endarr = explode(" ",$end);
$end_evt = $endarr[0] . "T" . $endarr[1] . "Z";

$data .= 'event.name.html=' . $form_state['values']['title'] . '&';
$data .= 'event.description.html=' . $urlencoded . '&';
$data .= 'event.organizer_id=' . $node->field_eb_organizer_id[$node->langcode][0]['value'] . '&';
$data .= 'event.start.utc=' . $start_evt . '&';
$data .= 'event.start.timezone=' . $node->field_eb_timezone[$node->langcode][0]['value'] . '&';
$data .= 'event.end.utc=' . $end_evt . '&';
$data .= 'event.end.timezone=' . $node->field_eb_timezone[$node->langcode][0]['value'] . '&';
$data .= 'event.currency=' . $node->field_eb_currency[$node->langcode][0]['value'] . '&';
$data .= 'event.venue_id=' . $node->field_eb_venue_id[$node->langcode][0]['value'] . '&';
$data .= 'event.online_event=' . $field_eb_online_event . '&';
$data .= 'event.listed=' . $field_eb_listed . '&';
$data .= 'event.logo_id=' . $node->field_eb_logo_id[$node->langcode][0]['value'] . '&';
$data .= 'event.category_id=' . $node->field_eb_category[$node->langcode][0]['value'] . '&';
$data .= 'event.format_id=' . $node->field_eb_format_id[$node->langcode][0]['value'] . '&';
$data .= 'event.shareable=' . $field_eb_shareable . '&';
$data .= 'event.invite_only=' . $field_eb_invite_only . '&';
$data .= 'event.capacity=' . $field_eb_capacity . '&';
$data .= 'event.show_remaining=' . $field_eb_show_remaining;

$options = array(
                     'method' => 'POST',
                     'data' => $data,
                     'timeout' => 15,
                     'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
             );

$app_token = config_get('eventbrite_events.settings', 'eventbrite_events_token');
if ( isset($app_token) && ($app_token != "") && isset($data) && ($data != "") ) {
$result = backdrop_http_request('https://www.eventbriteapi.com/v3/events/?token=' . $app_token, $options);

if ($result->code == "200")
{
$theevent = $result->data;
$theevent = json_decode($theevent);
unset($node->nid);
unset($node->vid);
unset($node->path);
$node->title = $form_state['values']['title'];
$node->field_eb_id[$node->langcode][0]['value'] = $theevent->id;
$node->field_eb_start_date[$node->langcode][0]['value'] = $start;
$node->field_eb_end_date[$node->langcode][0]['value'] = $end;
$node->field_eb_full_date[$node->langcode][0]['value'] =  $start;
$node->field_eb_full_date[$node->langcode][0]['value2'] =  $end;

$node->save();
}
else
{
backdrop_set_message("Event not saved.  Error processing the Eventbrite Event Url: " . $result->error . " " . $result->status_message, "warning");
}
}
}




function eventbrite_event_node_form_validate($form, &$form_state) {

}

function eventbrite_event_node_form_submit($form, &$form_state) {
$nid = $form_state['values']['nid'];
$node = node_load($nid);

$data = '';
if ($form_state['values']['title'] != $form['title']['#default_value'])
{
$data .= 'event.name.html=' . $form_state['values']['title'] . '&';
$node->title = $form_state['values']['title'];
}

if ($form_state['values']['body']['und'][0]['value'] != $form['body']['und'][0]['value']['#default_value'])
{
$urlencoded = urlencode($form_state['values']['body']['und'][0]['value'] );
$data .= 'event.description.html=' . $urlencoded . '&';
$node->body['und'][0]['value'] = $form_state['values']['body']['und'][0]['value'];
}

if ($form_state['values']['field_eb_capacity']['und'][0]['value'] != $form['field_eb_capacity']['und'][0]['value']['#default_value'])
{
$data .= 'event.capacity=' . $form_state['values']['field_eb_capacity']['und'][0]['value'] . '&';
$node->field_eb_capacity['und'][0]['value'] = $form_state['values']['field_eb_capacity']['und'][0]['value'];
}

if ($form_state['values']['field_eb_listed']['und'][0]['value'] != $form['field_eb_listed']['und'][0]['value']['#default_value'])
{
$data .= 'event.listed=' . $form_state['values']['field_eb_listed']['und'][0]['value'] . '&';
$node->field_eb_listed['und'][0]['value'] = $form_state['values']['field_eb_listed']['und'][0]['value'];
}

if ($form_state['values']['field_eb_shareable']['und'][0]['value'] != $form['field_eb_shareable']['und'][0]['value']['#default_value'])
{
$data .= 'event.shareable=' . $form_state['values']['field_eb_shareable']['und'][0]['value'] . '&';
$node->field_eb_shareable['und'][0]['value'] = $form_state['values']['field_eb_shareable']['und'][0]['value'];
}

$app_token = config_get('eventbrite_events.settings', 'eventbrite_events_token');
if ( isset($app_token) && ($app_token != "") && isset($data) && ($data != "") ) {
$options = array(
                  'method' => 'POST',
                  'data' => $data,
                  'timeout' => 15,
                  'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
          );

$result = backdrop_http_request('https://www.eventbriteapi.com/v3/events/' . $form['field_eb_id']['und'][0]['value']['#default_value'] . '/?token=' . $app_token, $options);

if ($result->code == "200")
{
$node->save();
}
else
{
backdrop_set_message("Event not saved. Error processing the Eventbrite Event Url: " . $result->error . " " . $result->status_message, "warning");
}


}

}


/**
* Implementation of hook_menu().
*/
function eventbrite_events_menu() {
  $items = array();
  // Admin settings.
  $items['admin/config/eventbrite_events'] = array(
    'title' => 'Eventbrite Events Manager Admin',
    'description' => 'Manage your Eventbrite events from this section',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('eventbrite_events_admin_settings'),
    'access arguments' => array('Use Eventbrite Events'),
    'page arguments' => array('eventbrite_events_admin_settings', NULL),
    'file' => 'eventbrite_events.admin.inc',
  );
  $items['admin/config/eventbrite_events/keys'] = array(
        'title' => 'Eventbrite API Keys',
        'description' => 'Place your API keys here to access your Eventbrite information',
        'page callback' => 'backdrop_get_form',
        'page arguments' => array(
            'eventbrite_events_admin_keys'
        ),
        'access arguments' => array(
            'Access Eventbrite Keys'
        ),
        'type' => MENU_LOCAL_TASK,
        'file' => 'eventbrite_events.admin.inc',
        'weight' => 10
    );
  return $items;
}


/**
 * Implements hook_node_view().
 */
function eventbrite_events_node_view($node, $view_mode, $langcode) {

    if ($view_mode != "rss") {
    if ($node->type == "eventbrite_event") {

      $field_eb_id = field_get_items('node', $node, 'field_eb_id');
      if (empty($field_eb_id) ) {
      }
      else {
        $app_key = config_get('eventbrite_events.settings', 'eventbrite_events_app_key');
        $user_key = config_get('eventbrite_events.settings', 'eventbrite_events_user_key');
        $app_token = config_get('eventbrite_events.settings', 'eventbrite_events_token');
        if( isset($app_key) && isset($user_key) && isset($app_token) && ($app_key != "") && ($user_key != "") && ($app_token != "")) {
      $authentication_tokens = array('app_key'  => $app_key, 'user_key' => $user_key);
      $eb_client = new Eventbrite( $authentication_tokens );

      $ticketWidget = config_get('eventbrite_events.settings', 'eventbrite_events_ticketWidget');
      if ($ticketWidget > 0)
      {
      $resp = $eb_client->event_get( array('id'=> $field_eb_id[0]['safe_value']) );
      $node->content['eventbrite_events_ticketWidget'] = array(
         '#markup' => Eventbrite::ticketWidget($resp->event),
         '#weight' => 50,
       );
      }

      $registrationWidget = config_get('eventbrite_events.settings', 'eventbrite_events_registrationWidget');
      if ($registrationWidget > 0)
      {
      $resp = $eb_client->event_get( array('id'=> $field_eb_id[0]['safe_value']) );
      $node->content['eventbrite_events_registrationWidget'] = array(
         '#markup' => Eventbrite::registrationWidget($resp->event),
         '#weight' => 50,
       );
      }

      $calendarWidget = config_get('eventbrite_events.settings', 'eventbrite_events_calendarWidget');
      if ($calendarWidget > 0)
      {
      $resp = $eb_client->event_get( array('id'=> $field_eb_id[0]['safe_value']) );
      $node->content['eventbrite_events_calendarWidget'] = array(
         '#markup' => Eventbrite::calendarWidget($resp->event),
         '#weight' => 50,
       );
      }

      $countdownWidget = config_get('eventbrite_events.settings', 'eventbrite_events_countdownWidget');
      if ($countdownWidget > 0)
      {
      $resp = $eb_client->event_get( array('id'=> $field_eb_id[0]['safe_value']) );
      $node->content['eventbrite_events_countdownWidget'] = array(
         '#markup' => Eventbrite::countdownWidget($resp->event),
         '#weight' => 50,
       );
      }

      $buttonWidget = config_get('eventbrite_events.settings', 'eventbrite_events_buttonWidget');
      if ($buttonWidget > 0)
      {
      $resp = $eb_client->event_get( array('id'=> $field_eb_id[0]['safe_value']) );
      $node->content['eventbrite_events_buttonWidget'] = array(
         '#markup' => Eventbrite::buttonWidget($resp->event),
         '#weight' => 50,
       );
      }

      $linkWidget = config_get('eventbrite_events.settings', 'eventbrite_events_linkWidget');
      if ($linkWidget > 0)
      {
      $resp = $eb_client->event_get( array('id'=> $field_eb_id[0]['safe_value']) );
      $node->content['eventbrite_events_linkWidget'] = array(
         '#markup' => Eventbrite::linkWidget($resp->event),
         '#weight' => 50,
       );
      }

      }
    }
    }
}
}
